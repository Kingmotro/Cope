{
  "name": "Cope",
  "tagline": "Cope is a simple and easy config format, parser and API for Java.",
  "body": "# Cope\r\nCope is a simple and easy config format, parser and API for Java.\r\n\r\nCope was designed to be very simple and easy to understand. Look at the examples below and you will see that it is really cool and neat.\r\n\r\n**You can view the junit code coverage [here](https://jackwhite20.github.io/Cope/coverage).**\r\n\r\n# Features\r\n\r\n- readable\r\n- comments\r\n- defaults\r\n- easy to use\r\n- lightweight\r\n- fast\r\n\r\n# Config format\r\n\r\n_Config file config.cop:_\r\n\r\n```yaml\r\n# Comment support\r\nglobal:\r\n    connections 200\r\n\r\ntimeout:\r\n\tconnect 5000\r\n    client 50000\r\n    server 50000\r\n\r\nserver:\r\n    bind 0.0.0.0 80\r\n```\r\n\r\n# Examples\r\n\r\n**If you want to use the javadoc you can browse it [here](https://jackwhite20.github.io/Cope/doc/).**\r\n\r\n_General example:_\r\n\r\n```java\r\ntry {\r\n\t// Create a config from a config file\r\n\tCopeConfig cope = Cope.from(\"config.cop\").build();\r\n\r\n\t// Check if the header and the key is available\r\n\tif (cope.hasHeaderAndKey(\"global\", \"max-con\")) {\r\n\t\tKey maxCon = cope.getHeader(\"global\").getKey(\"max-con\");\r\n\t\tif (maxCon.hasValues()) {\r\n\t\t\tSystem.out.println(\"Max connections: \" + maxCon.getValue(0).asInt());\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if the header exists\r\n\tif (cope.hasHeader(\"timeout\")) {\r\n\t\tHeader timeoutHeader = cope.getHeader(\"timeout\");\r\n\r\n\t\tKey connectKey = timeoutHeader.getKey(\"connect\");\r\n\t\tif (connectKey.hasValues()) {\r\n\t\t\tSystem.out.println(\"Timeout connect: \" + connectKey.getValue(0));\r\n\t\t}\r\n\r\n\t\tKey clientKey = timeoutHeader.getKey(\"client\");\r\n\t\tif (clientKey.hasValues()) {\r\n\t\t\tSystem.out.println(\"Timeout client: \" + clientKey.getValue(0));\r\n\t\t}\r\n\r\n\t\tKey serverKey = timeoutHeader.getKey(\"server\");\r\n\t\tif (serverKey.hasValues()) {\r\n\t\t\tSystem.out.println(\"Timeout server: \" + serverKey.getValue(0));\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if the header and the key is available\r\n\tif (cope.hasHeaderAndKey(\"server\", \"bind\")) {\r\n\t\tKey bindKey = cope.getHeader(\"server\").getKey(\"bind\");\r\n\t\t// Check if the key has values\r\n\t\tif (bindKey.hasValues()) {\r\n\t\t\tString host = bindKey.getValue(0).asString();\r\n\t\t\tint port = bindKey.getValue(1).asInt();\r\n\r\n\t\t\tSystem.out.println(\"Host: \" + host);\r\n\t\t\tSystem.out.println(\"Port: \" + port);\r\n\t\t}\r\n\t}\r\n} catch (CopeException e) {\r\n\te.printStackTrace();\r\n}\r\n```\r\n\r\n_Defaults:_\r\n\r\nDefaults are working all the same. Of course you can set multiple key defaults in one header\r\nif you call the \"def\" method multiple times with the same header but a different key.\r\n\r\n```yaml\r\nglobal:\r\n    connections 200\r\n\r\n# You want to have a default for the missing \"server\" header\r\n```\r\n\r\n```java\r\ntry {\r\n    // Create the cope and add the default header\r\n\tCopeConfig cope = Cope.from(\"config.cop\")\r\n\t\t\t.def(new Header(\"server\"), new Key(\"bind\"), new Value(\"0.0.0.0\"), new Value(\"8080\"))\r\n\t\t\t//.def(new Header(\"server\"), new Key(\"another-key\"), new Value(\"value\"))\r\n\t\t\t.build();\r\n\r\n\t// No need to check if the header or key exists\r\n\t// because we have the default values\r\n\tKey bindKey = cope.getHeader(\"server\").getKey(\"bind\");\r\n\tString host = bindKey.getValue(0).asString();\r\n\tint port = bindKey.getValue(1).asInt();\r\n\r\n\tSystem.out.println(\"Host: \" + host);\r\n\tSystem.out.println(\"Port: \" + port);\r\n} catch (CopeException e) {\r\n\te.printStackTrace();\r\n}\r\n```\r\n\r\n# Installation\r\n\r\n_Maven:_\r\n\r\n- Install [Maven 3](http://maven.apache.org/download.cgi)\r\n- Clone/Download this repo\r\n- Install it with: ```mvn clean install```\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>de.jackwhite20</groupId>\r\n    <artifactId>cope</artifactId>\r\n    <version>1.0.0-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\n_Jar library:_\r\n\r\nSimply download the jar from a [release](https://github.com/JackWhite20/Cope/releases) and include it in your project.\r\n\r\n### License\r\n\r\nLicensed under the GNU General Public License, Version 3.0.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}